# 01 - Searching Directory
setwd("F:/github/r/Predict-Risk-of-Credit")
getwd()
# 02 - Coleting the dataset
ds<- data.frame(read.csv("credit.csv",header =TRUE, stringsAsFactors = TRUE))
View(ds)
#04 - name the columns
colnames(ds)<- c("CheckingAcctStat","Duration", "CreditHistory","Purpose",
"CreditAmount","SavingsBonds","Employment", "InstallmentRatePecnt",
"SexAndStatus", "OtherDetorsGuarantors","PresentResidenceTime",
"Property","Age","OtherInstallments","Housing","ExistingCreditsAtBank",
"Job","NumberDependents","Telephone","ForeignWorker", "CreditStatus")
#05 - general information
#dimension
dim(ds)
#types of variables
str(ds)
#05 - Missing Values
colSums(is.na(ds))
#No missing values in this data.Therefore,will not be necessary to  treat them.
#06- Duplicate values
sum(duplicated(ds))
#No duplicated values.So, no action
#07- Grouped values
View(ds)
#According with the dataset, we don't have grouped values in the variables.
#Data exploration
#There are two types of data exploration: univariate and bivariate analyses.
#01-Types of variables
str(ds)
#As show above, we have two types of variables, categorical and numerical.
# Unique values - It's a important parameter to understand which column is categorical and which one is numerical
# Typically if the number of unique values are < 20 then the variable is likely to be a category otherwise numerical
uv<- apply(ds,2,function(x)length(unique(x)))
uv
#02 - Identify the target variable
#The target variable is "CreditStatus", that show the risk of credit for customers
#We have a binary data 1 is good and 2 is bad,as show in"graph_1 _Frequency of target variable".
#Absolute frequency
fa<- table(ds$CreditStatus)
#Relative frequency
fr<- round((prop.table(fa))*100)
fr
#barplot
graph_1 <- barplot(fr, xlab="Credit Status (Target Variable)",
ylab="Relative Frequency",col=c("seagreen", "yellowgreen"),
main="Frequency(%)",ylim = c(0,100))
text(x=c(graph_1), y=fr, labels=fr, pos=3)
box()
graph_1
# As the graph_1, it can see an imbalace of class.However, this only will be
# treat after the split of dataset.
#03- Univariate analyses
#To perform univariate analyses, it will be separete the types of datas in 2 groups
graph_1 <- barplot(fr, xlab="Credit Status (Target Variable)",
ylab="Relative Frequency",col=c("seagreen", "yellowgreen"),
main="Frequency(%)",ylim = c(0,100))
text(x=c(graph_1), y=fr, labels=fr, pos=3)
box()
graph_1
library(dplyr)
#numerical variables
ds_numerical <- ds %>% select(where(is.numeric))
View(ds_numerical)
#categorical variables
ds_categorical <- ds %>% select(where(is.factor))
View(ds_categorical)
summary(ds_numerical)
hist(ds_numerical$Duration, col="darkblue")
ggplot(ds_numerical, aes(x = x)) +
geom_histogram(aes(y = ..density..),
colour = 1, fill = "white") +
geom_density(lwd = 1, colour = 4,
fill = 4, alpha = 0.25)
library(ggplot2)
ggplot(ds_numerical, aes(x = x)) +
geom_histogram(aes(y = ..density..),
colour = 1, fill = "white") +
geom_density(lwd = 1, colour = 4,
fill = 4, alpha = 0.25)
ggplot(ds_numerical, aes(x = ds_numerical$Duration)) +
geom_histogram(aes(y = ..density..),
colour = 1, fill = "white") +
geom_density(lwd = 1, colour = 4,
fill = 4, alpha = 0.25)
hist(ds_numerical$Duration)
ggplot(ds_numerical, aes(x = ds_numerical$Duration)) +
geom_histogram(aes(y = ..density..),
colour = 1, fill = "white") +
geom_density(lwd = 1, colour = 4,
fill = 4, alpha = 0.25)
ggplot(ds_numerical, aes(x ='Duration')) +
geom_histogram(aes(y = ..density..),
colour = 1, fill = "white") +
geom_density(lwd = 1, colour = 4,
fill = 4, alpha = 0.25)
ggplot(ds_numerical, aes(x =Duration)) +
geom_histogram(aes(y = ..density..),
colour = 1, fill = "white") +
geom_density(lwd = 1, colour = 4,
fill = 4, alpha = 0.25)
ggplot(ds_numerical, aes(x =Duration)) +
geom_histogram(aes(y = ..density..),
colour = 1, fill = "white",main='Duration Histogram') +
geom_density(lwd = 1, colour = 4,
fill = 4, alpha = 0.25)
ggplot(ds_numerical, aes(x =Duration)) +
geom_histogram(aes(y = ..density..),
colour = 1, fill = "white") +
geom_density(lwd = 1, colour = 4,
fill = 4, alpha = 0.25)
summary(ds_numerical)
ggplot(ds_numerical, aes(x =Duration)) +
geom_histogram(aes(y = ..density..),
colour = 1, fill = "white") +
geom_density(lwd = 1, colour = 4,
fill = 4, alpha = 0.25)+
ggtitle('Duration Histogram')
ggplot(ds_numerical, aes(x =CreditAmount)) +
geom_histogram(aes(y = ..density..),
colour = 1, fill = "white") +
geom_density(lwd = 1, colour = 4,
fill = 4, alpha = 0.25)+
ggtitle('reditAmount Histogram')
histograms <- function(ds){
for (col in names(ds)) {
ggplot(ds, aes(x =col)) +
geom_histogram(aes(y = ..density..),
colour = 1, fill = "white") +
geom_density(lwd = 1, colour = 4,
fill = 4, alpha = 0.25)+
ggtitle(col)
}
}
histograms(ds_numerical)
histograms(ds_numerical)
histograms(ds_numerical)
histograms(ds_numerical)
histograms(ds_numerical)
